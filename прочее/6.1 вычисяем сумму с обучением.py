import numpy as np 


def Relu(z):
    return np.maximum(0, z)

Data = np.array([
    [2, 7],
    [8, 5],
    [6, 6]

])

Answers = np.array([
    [4],
    [40],
    [36]
    ])

w0 = np.random.rand(3, 2)
w1 = np.random.rand(1, 3)
bias0 = np.random.rand(3, 1)
bias1 = np.random.rand(1, 1)


for rh in range(200):
    z1 = Data @ w0.T + bias0
    a1 = Relu(z1)

    out = a1 @ w1.T + bias1
    # выстраивает его по уверенности
    # Sigmoid = 1 / (1 + np.exp(-out)) 
    print("ответ нейросети", out)

    # после того, как ты нажевал привычные тобой ответ и сигмоиду, теперь ты должен узнать насколько нейросеть ошиблась
    # потеря данных = предсказание нейросети - реальный ответ говорит о том, насколько мы обосрались
    loss = out - Answers
    # теперь мы делаем градиентный спуск, эта штука должна показывать на сколько сместиться что бы выявить ошибку
    # вообщем
    # градиентный спуск = на сколько проебались * ответ нейросети * (1 - предсказание нейросети)
    GradOuting = loss * out * (1 - out)
    GradOuting = loss
    print(GradOuting)
    print(f"Шаг {rh+1}: предсказание = {out[0][0]:.4f}, ошибка = {loss[0][0]:.4f}")

    # теперь находим градиент для наших нейрончиков для этого мы просто немного подредачим наши веса и плату за воздух
    # насколько она обосралась в этой области
    print(GradOuting)
    w1G = GradOuting @ a1
    bias1G = GradOuting
    # теперь подкорриектируем ответы насколько чего что
    a1G = GradOuting @ w1
    z1G = a1G * (z1 > 0)

    # теперь нажуём наши веса и плату за воздух для наших скрытый слоёв 3 нейрончиков
    w0G = z1G @ Data
    bias0G = z1G

    # теперь уже обновляем наши веса все, и платы за воздух для всех нейрончиков у нас уже ведь есть данные 
    # о том насколько что надо подкарриектировать, это w0 с гдариентным спуском и частичкой ответа и т.п
    # lr это то насколько мы верим нашему шагу как я понял 0.01 это вроде норм мы ему верим это типо шаг в цикле
    LR = 0.01 
    w1 -= LR * w1G
    bias1 -= LR * bias1G

    w0 -= LR * w0G
    bias0 -= LR * bias0G
    print(rh +1)












